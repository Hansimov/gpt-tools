from datetime import datetime
import os
import json
from pathlib import Path

# python -m pip install --upgrade openai
import openai


def init_os_envs():
    with open(Path(__file__).parent / "secrets.json", "r") as rf:
        secrets = json.load(rf)
    os.environ["OPENAI_API_KEY"] = secrets["openai_api_key"]

    for proxy_env in ["http_proxy", "https_proxy"]:
        os.environ[proxy_env] = secrets["http_proxy"]


init_os_envs()
openai.api_key = os.environ["OPENAI_API_KEY"]


"""
* openai-cookbook: How to format inputs to ChatGPT models
  * https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb

  
# API Request

A chat API call has two required inputs:
1. `model`: The name of the model you want to use
  * Example: "gpt-3.5-turbo", "gpt-4", "gpt-4-0314"
2. `messages`: A list of message objects, where each object has two required fields:
  * `role`: Role of the messenger
    * Choices: "system", "user", "assistant"
  * `content`: Content of the message
    * Example: "Write me a beautiful poem"

Messages can also contain an optional `name` field, which give the messenger a name.
* Example: "example-user", "Alice", "BlackbeardBot".
> Names may not contain spaces.

Typically, a conversation will:
1. start with a `system` message that tells the assistant how to behave
2. followed by alternating `user` and `assistant` messages
> You are not required to follow this format.


# API Response

The response object has a few fields:

1. `id`: ID of the request
2. `object`: Type of object returned
  * Example: `chat.completion`
3. `created`: Timestamp of the request
4. `model`: Full name of the model used to generate the response
5. `usage`: Number of tokens used to generate the replies, counting prompt, completion, and total
6. `choices`: a list of completion objects (only one, unless you set n greater than 1)
  * `message`: Message object generated by the model, with role and content
  * `finish_reason`: Reason for the model stopped generating text (either stop, or length if max_tokens limit was reached)
  * `index`: Index of the completion in the list of choices

# Tips
System messages
* The system message can be used to prime the assistant with different personalities or behaviors.
* Be aware that gpt-3.5-turbo-0301 does not generally pay as much attention to the system message as gpt-4-0314.
* Therefore, for "gpt-3.5-turbo-0301", we recommend PLACING IMPORTANT INSTRUCTIONS IN THE `USER` MESSAGE INSTEAD.
* Some developers have found success in continually moving the system message near the end of the conversation to keep the model's attention from drifting away as conversations get longer.


"""


def days_to_readable_str(dt_days):
    dt_months = dt_days // 30
    dt_years = dt_days // 365
    duration_str = ""
    if dt_years > 0:
        year_str = "年"
        duration_str = f"{dt_years}{year_str}"
    elif dt_months > 0:
        month_str = "月"
        duration_str = f"{dt_months}{month_str}"
    else:
        if dt_days == 0:
            duration_str = "今天"
        else:
            day_str = "天"
            duration_str = f"{dt_days}{day_str}"

    return duration_str


def date_duration(date_str):
    now = datetime.now()
    date_format_list = [
        "%Y-%m-%d",
    ]
    date = None
    for date_format in date_format_list:
        try:
            date = datetime.strptime(date_str, date_format)
            break
        except:
            continue
    if date is None:
        raise ValueError

    dt = now - date
    duration_str = days_to_readable_str(dt.days)

    if dt.days > 0:
        duration_str += "前"
    return dt.days, duration_str


class Translater:
    def __init__(
        self,
        original_text,
        model="gpt-3.5-turbo",
        task="paper-en",
    ):
        self.model = model
        if task == "paper-en":
            self.system_message = (
                "你是一个学术翻译专家。你的任务是将给定的英文如实翻译成中文。你的翻译应当是严谨的和自然的，不要删改原文。请按照要求翻译下面的文本："
            )
        self.original_text = original_text

    def run(self):
        response = openai.ChatCompletion.create(
            model=self.model,
            messages=[
                {
                    "role": "user",
                    "content": self.system_message + self.original_text,
                },
            ],
            temperature=0,
        )

        self.translated_text = response["choices"][0]["message"]["content"]
        return self.translated_text


if __name__ == "__main__":
    translater = Translater(
        "Evaluation of GPT-3.5 and GPT-4 for supporting real-world information needs in healthcare delivery"
    )
    translater.run()
    print(translater.translated_text)
